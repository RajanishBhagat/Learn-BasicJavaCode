The only difference between a while loop and for loop is that the for loop repeats the task for a specific number of times but the while loop repeats the task for an unknown number of times.

1. Variable name can start only with letter, under score ‘_’ and the dollar sign ‘$’ and also can  include digits.
2.  Operators : Java operators can be classified as 
Unary : Takes one argument.   (These operators appear before (prefix) its argument or after (postfix) its argument.)
Binary : Takes two arguments.  (These operators appear between its arguments.)
Ternary : Takes three arguments.  (These operators appear between its arguments.)

Different types of Operators in java
Assignment Operators : =
Arithmetic Operators : - + * / % ++ --
Relational Operators : > < >= <= == !=
Logical Operators : && || & | ! ^  
Logical operators return a true or false value based on the state of the Variables.Each argument to a logical operator must be a boolean data type, and the result is always a boolean data type.
Conditional Operator : ?
The conditional operator is the only operator that takes three arguments in Java. The conditional operator is equivalent to if-else statement. It is also known as the ternary operator. 
Syntax =>>   variable = (expression) ? value if true : value if false
Bit wise Operator : & | ^ >> >>>
Compound Assignment Operators :  += -= *= /= %=

public  class Operator
 {
 static int speed = 80; //Assignement Operator 
 static int num = 10 + 30;
  public static void main(String[] args) {
  int Ten = 10;
  int Twenty = 20;
  int Thirty = 30;
  boolean Output_1 = true;
  boolean Output_2 = false;
  boolean bValue;
  int iValue;
  System.out.println(speed);
  System.out.println(num);
  System.out.println("<<<<<<Going to use Relational Operator >>>>>>>>>>");
  System.out.println(" Ten > Twenty ==> " + (Ten > Twenty)); //false
  System.out.println(" Twenty > Ten ==> " + (Twenty > Ten)); //true
  System.out.println(" Ten <= Twenty ==> " + (Ten <= Twenty)); //true
  System.out.println("<<<<<<Going to use logical operator >>>>>>>>>>>");
  System.out.println("Check if both the boolean variables are true : " + (Output_1 && Output_2));
  System.out.println("Check if even one of the boolean varibale is true : " + (Output_1 || Output_2));
  System.out.println("Change the state of the Output_1 to false : " + (!Output_1));
  System.out.println("<<<<<<Going to use Conditional Operator >>>>>>>>>>>>>>>");
  bValue = (Thirty == Twenty + Ten) ? true: false;
  System.out.println( "The boolean value of the variable 'bValue' is : " +  bValue ); //true
  iValue = ((Thirty == Twenty + Ten)) ? 50: 100;
  System.out.println( "The int Value of the variable iValue is : " + iValue ); //50
  //This is a use of Not Logical Operator
  iValue = (!(Thirty == Twenty + Ten)) ? 50: 100;
  System.out.println( "The int Value of the variable iValue is : " + iValue ); //100
        }

}
==============================================================================================
Array : 
Array.java
public class Array {

        public static void main(String[] args) {
                String [] aMake = {"BMW","AUDI","TOYOTA","SUZUKI","HONDA"};

                int iLength = aMake.length;   //This is to store the size of the Array
                System.out.println("Length of the Array is ==> " + iLength);

                String sBMW = aMake[0];   //This is to access the first element of an array directly with it's position
                System.out.println("First value of the Array is ==> " + sBMW);

                String sHonda = aMake[iLength-1];   //This is to access the last element of an Array
                System.out.println("Last value of the Array is ==> " + sHonda);

                //This is to print all the element values of an Array
                for(int i = 0;i<=iLength-1;i++){
                        System.out.println("The value stored at position "+i+" in aMake array is ==> " + aMake[i]);
                }
        }
}
---------------------------------------------------------------------------------------------------------
Passing_Array.java
public class Passing_Array {
        public static void Print_Array(String []array)    //This accept Array as an argument of type String
        {
                for(int i = 0;i<=array.length-1;i++){
                        System.out.println("Printing all the values of an Array ==> " + array[i]);
                }
        }
        public static void main(String[] args) {
                String [] aMake = {"BMW","AUDI","TOYOTA","SUZUKI","HONDA"};   //Declaring an Array
                Print_Array(aMake);  // Calling Print Array method and passing an Array as a parameter
        }
}
-------------------------------------------------------------------------------------------------------
Returning_Array.java
public class Returning_Array {

        public static void main(String[] args) {
                String[] aMake = ReturnArray();
                for(int i = 0;i<=aMake.length-1;i++){
                        System.out.println("Printing all the values of an Array ==> " + aMake[i]);
                        }
                }
        //This method returns an Array of type String
        public static String[] ReturnArray() {
                String [] aArray = {"BMW","AUDI","TOYOTA","SUZUKI","HONDA"};
                  return aArray;
                }
        }
============================================================================================================================
In Java when the object is created, compiler calls the constructor first. It means any code written in the constructor will then get executed. 

In Object Oriented Programming (OOP), an object is an instance of a class. An object can be considered as a thing, which performs a set of activities. 
An object can be anything and in real world an object can be a dog, table, window, car etc.
But objects always share two characteristics, they all have state and they all have behaviors. 
For example a car have state (make, brand, color, model) and have behavior (braking, accelerating, slowing down, changing gears).

All the objects created from a single class share the same behavior and state. 
The difference between a class and an object is that class are created when the program is created but the objects are created at the run time.

Why do we need Constructor?
There can be a situation where exposing the class variable to the main program is not secure. At that point of time, class variables can be turned to private because the private
variables are not accessible from the other classes. In this situation if the constructors are defined, then the main method would not need to access class variables directly.

class Car {
    private String sModel;
    private int iMake;
    private int iGear;
    int iHighestSpeed;
    String sColor;
    boolean bLeftHandDrive;
    String sTransmission;
    int iTyres;
    int iDoors;
    //Default values set in Constructor
    public Car(){
        sModel = "Camry";
        iMake = 2014;
        iGear = 5;
    }
    public void DisplayCharacterstics(){
        System.out.println("Model of the Car: " +  sModel);
        System.out.println("Number of gears in the Car: " +  iGear);
        System.out.println("Max speed of the Car: " +  iHighestSpeed);
        System.out.println("Color of the Car: " +  sColor);
        System.out.println("Make of the Car: " +  iMake);
        System.out.println("Transmission of the Car: " +  sTransmission);
    }
}
public class ConstructorTestExercise {
        public static void main(String[] args) {
                //Use the Car keyword to declare Car Class variable
                Car Toyota = new Car();;
                Toyota.iDoors = 4;
                Toyota.iHighestSpeed = 200;
                Toyota.iTyres = 4;
                Toyota.sColor = "Black";
                Toyota.sTransmission = "Manual";
                Toyota.bLeftHandDrive = true;
                Toyota.DisplayCharacterstics();  //Using Car class method
        }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
public class StringTest{
        public static void main(String[] args) {
                  String sPopularTopic = "Selenium Automation Framework";
                  String sPopularTopic_2 = "Rajanish Bhagat";
                  String sSpace = " ";

                  int ilength = sPopularTopic.length();
                  System.out.println("Popular Topic of ToolsQA: " +  sPopularTopic);
                  System.out.println("Length of the Popular Topic: " +  ilength);
                  System.out.println(sPopularTopic.concat(sPopularTopic_2));
                  System.out.println("Selenium Automation Framework".concat(sPopularTopic_2));
                  System.out.println("Selenium Automation Framework" +sSpace+ "Basic Java Tutorial");

                 boolean bCompareResult = sPopularTopic.equals(sPopularTopic_2);
                 System.out.println("The result of String Comparison is : " + bCompareResult);

                 boolean bContainResult = sPopularTopic.contains("Framework");
                 System.out.println("The result is : " + bContainResult);

                  String [] aSplit = sPopularTopic.split("Automation");
                  System.out.println("The first part of the array is : " + aSplit[0]);
                  System.out.println("The last part of the array is : " + aSplit[1]);
        }
        }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
The advantage of the static keyword in Java is efficient memory management. The static keyword belongs to the class rather than the instance of the class,
means it is not required to instantiate the class to access its fields.

The basic functionality of the static keywords remains same for variable & methods means a static method is belongs to the class rather than the object of the class.
//you cannot use the non-static members inside the static method.   Only local variables & static/class variables can be used in the static method.

The static keyword can be used for following:
variable (also known as class variable)  //so if you have any variable whose value is fixed throughout the program you can use the static keyword in its declaration.
method (also known as class method)    
block
nested class

Example for Static block : Block is nothing but a piece of code written between parenthesis {}. If the static modifiers is used in the declaration of the block, 
it means that piece of code will run first when the program is start, it will execute before the main method. If a block is static, it almost works like the class constructors.

package vehicle;
    public class Car {
        public String sModel;
        public int iHighestSpeed;
        public static int iSteering;
        public static int iWheel;
        public static int iDoors;

	static {
        iSteering = 1;
        iWheel = 4;
        System.out.println("This block executed first");
        }

	public static void DisplayCharacterstics() {
        System.out.println("Number of Wheels in the Car: " + iWheel);
        System.out.println("Number of Steering in the Car: " + iSteering);
        }
    public static void main(String[] args) {
        Car.DisplayCharacterstics();
        }
	}
	
-----------------------------------------------------------------------------------------------------------------------------------------------
