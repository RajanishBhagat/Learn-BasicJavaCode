JVM(Java Virtual Machine) acts as a run-time engine to run Java applications. JVM is the one that actually calls the main method present in a java code. JVM is a part of JRE(Java Runtime Environment).
Java applications are called WORA (Write Once Run Anywhere). This means a programmer can develop Java code on one system and can expect it to run on any other Java enabled system without any adjustment. This is all possible because of JVM.

How to set path in java ??
Temporary path :
1. open cmd  2. Copy the path of the JDK/bin directory
3. write   set path=C:\Program Files\Java\jdk1.6.0_23\bin

How to set Permanent Path of JDK in Windows ??
Go to MyComputer properties -> advanced tab -> environment variables -> new tab of user variable -> write "path" in variable name -> write path of "bin folder" in variable value -> ok -> ok -> ok

JVM (Java Virtual Machine) is an abstract machine. It is called a virtual machine because it doesn't physically exist.
The JVM performs the following main tasks:
Loads code
Verifies code
Executes code
Provides runtime environment

JRE : JRE is an acronym for Java Runtime Environment. It is also written as Java RTE. The Java Runtime Environment is a set of software tools which are used for developing Java applications. It is used to provide the runtime environment. It is the implementation of JVM. It physically exists. It contains a set of libraries + other files that JVM uses at runtime.

JDK : JDK is an acronym for Java Development Kit. The Java Development Kit (JDK) is a software development environment which is used to develop Java applications and applets. It physically exists. It contains JRE + development tools.

Architecture of flow :
SourceCode(.java)=> compiler called(javac) =>classloader => Byte Code verifier(.class file) => JVM( jvm calls Interpreater of linux/windows/os).
Summarize =>  Class Loader => Byte Code verifier => Executation Engine

The Java Virtual machine (JVM) is the virtual machine that runs on actual machine (your computer) and executes Java byte code. The JVM doesn’t understand Java source code, that’s why we need to have javac compiler that compiles *.java files to obtain *.class files that contain the byte codes understood by the JVM. JVM makes java portable (write once, run anywhere). Each operating system has different JVM, however the output they produce after execution of byte code is same across all operating systems.
================================================================================================================================================
The only difference between a while loop and for loop is that the for loop repeats the task for a specific number of times but the while loop repeats the task for an unknown number of times.

1. Variable name can start only with letter, under score ‘_’ and the dollar sign ‘$’ and also can  include digits.
2.  Operators : Java operators can be classified as 
Unary : Takes one argument.   (These operators appear before (prefix) its argument or after (postfix) its argument.)
Binary : Takes two arguments.  (These operators appear between its arguments.)
Ternary : Takes three arguments.  (These operators appear between its arguments.)

Different types of Operators in java
Assignment Operators : =
Arithmetic Operators : - + * / % ++ --
Relational Operators : > < >= <= == !=
Logical Operators : && || & | ! ^  
Logical operators return a true or false value based on the state of the Variables.Each argument to a logical operator must be a boolean data type, and the result is always a boolean data type.
Conditional Operator : ?
The conditional operator is the only operator that takes three arguments in Java. The conditional operator is equivalent to if-else statement. It is also known as the ternary operator. 
Syntax =>>   variable = (expression) ? value if true : value if false
Bit wise Operator : & | ^ >> >>>
Compound Assignment Operators :  += -= *= /= %=

public  class Operator
 {
 static int speed = 80; //Assignement Operator 
 static int num = 10 + 30;
  public static void main(String[] args) {
  int Ten = 10;
  int Twenty = 20;
  int Thirty = 30;
  boolean Output_1 = true;
  boolean Output_2 = false;
  boolean bValue;
  int iValue;
  System.out.println(speed);
  System.out.println(num);
  System.out.println("<<<<<<Going to use Relational Operator >>>>>>>>>>");
  System.out.println(" Ten > Twenty ==> " + (Ten > Twenty)); //false
  System.out.println(" Twenty > Ten ==> " + (Twenty > Ten)); //true
  System.out.println(" Ten <= Twenty ==> " + (Ten <= Twenty)); //true
  System.out.println("<<<<<<Going to use logical operator >>>>>>>>>>>");
  System.out.println("Check if both the boolean variables are true : " + (Output_1 && Output_2));
  System.out.println("Check if even one of the boolean varibale is true : " + (Output_1 || Output_2));
  System.out.println("Change the state of the Output_1 to false : " + (!Output_1));
  System.out.println("<<<<<<Going to use Conditional Operator >>>>>>>>>>>>>>>");
  bValue = (Thirty == Twenty + Ten) ? true: false;
  System.out.println( "The boolean value of the variable 'bValue' is : " +  bValue ); //true
  iValue = ((Thirty == Twenty + Ten)) ? 50: 100;
  System.out.println( "The int Value of the variable iValue is : " + iValue ); //50
  //This is a use of Not Logical Operator
  iValue = (!(Thirty == Twenty + Ten)) ? 50: 100;
  System.out.println( "The int Value of the variable iValue is : " + iValue ); //100
        }

}
==============================================================================================
Array : 
Array.java
public class Array {

        public static void main(String[] args) {
                String [] aMake = {"BMW","AUDI","TOYOTA","SUZUKI","HONDA"};

                int iLength = aMake.length;   //This is to store the size of the Array
                System.out.println("Length of the Array is ==> " + iLength);

                String sBMW = aMake[0];   //This is to access the first element of an array directly with it's position
                System.out.println("First value of the Array is ==> " + sBMW);

                String sHonda = aMake[iLength-1];   //This is to access the last element of an Array
                System.out.println("Last value of the Array is ==> " + sHonda);

                //This is to print all the element values of an Array
                for(int i = 0;i<=iLength-1;i++){
                        System.out.println("The value stored at position "+i+" in aMake array is ==> " + aMake[i]);
                }
        }
}
---------------------------------------------------------------------------------------------------------
array.length : length is a final variable applicable for arrays. With the help of length variable, we can obtain the size of the array.
string.length() : length() method is a final variable which is applicable for string objects. length() method returns the number of characters presents in the string.

Passing_Array.java
public class Passing_Array {
        public static void Print_Array(String []array)    //This accept Array as an argument of type String
        {
                for(int i = 0;i<=array.length-1;i++){
                        System.out.println("Printing all the values of an Array ==> " + array[i]);
                }
        }
        public static void main(String[] args) {
                String [] aMake = {"BMW","AUDI","TOYOTA","SUZUKI","HONDA"};   //Declaring an Array
                Print_Array(aMake);  // Calling Print Array method and passing an Array as a parameter
        }
}
-------------------------------------------------------------------------------------------------------
Returning_Array.java
public class Returning_Array {

        public static void main(String[] args) {
                String[] aMake = ReturnArray();
                for(int i = 0;i<=aMake.length-1;i++){
                        System.out.println("Printing all the values of an Array ==> " + aMake[i]);
                        }
                }
        //This method returns an Array of type String
        public static String[] ReturnArray() {
                String [] aArray = {"BMW","AUDI","TOYOTA","SUZUKI","HONDA"};
                  return aArray;
                }
        }
============================================================================================================================
In Java when the object is created, compiler calls the constructor first. It means any code written in the constructor will then get executed. 

In Object Oriented Programming (OOP), an object is an instance of a class. An object can be considered as a thing, which performs a set of activities. 
An object can be anything and in real world an object can be a dog, table, window, car etc.
But objects always share two characteristics, they all have state and they all have behaviors. 
For example a car have state (make, brand, color, model) and have behavior (braking, accelerating, slowing down, changing gears).

All the objects created from a single class share the same behavior and state. 
The difference between a class and an object is that class are created when the program is created but the objects are created at the run time.

Why do we need Constructor?
There can be a situation where exposing the class variable to the main program is not secure. At that point of time, class variables can be turned to private because the private
variables are not accessible from the other classes. In this situation if the constructors are defined, then the main method would not need to access class variables directly.

class Car {
    private String sModel;
    private int iMake;
    private int iGear;
    int iHighestSpeed;
    String sColor;
    boolean bLeftHandDrive;
    String sTransmission;
    int iTyres;
    int iDoors;
    //Default values set in Constructor
    public Car(){
        sModel = "Camry";
        iMake = 2014;
        iGear = 5;
    }
    public void DisplayCharacterstics(){
        System.out.println("Model of the Car: " +  sModel);
        System.out.println("Number of gears in the Car: " +  iGear);
        System.out.println("Max speed of the Car: " +  iHighestSpeed);
        System.out.println("Color of the Car: " +  sColor);
        System.out.println("Make of the Car: " +  iMake);
        System.out.println("Transmission of the Car: " +  sTransmission);
    }
}
public class ConstructorTestExercise {
        public static void main(String[] args) {
                //Use the Car keyword to declare Car Class variable
                Car Toyota = new Car();;
                Toyota.iDoors = 4;
                Toyota.iHighestSpeed = 200;
                Toyota.iTyres = 4;
                Toyota.sColor = "Black";
                Toyota.sTransmission = "Manual";
                Toyota.bLeftHandDrive = true;
                Toyota.DisplayCharacterstics();  //Using Car class method
        }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
public class StringTest{
        public static void main(String[] args) {
                  String sPopularTopic = "Selenium Automation Framework";
                  String sPopularTopic_2 = "Rajanish Bhagat";
                  String sSpace = " ";

                  int ilength = sPopularTopic.length();
                  System.out.println("Popular Topic of ToolsQA: " +  sPopularTopic);
                  System.out.println("Length of the Popular Topic: " +  ilength);
                  System.out.println(sPopularTopic.concat(sPopularTopic_2));
                  System.out.println("Selenium Automation Framework".concat(sPopularTopic_2));
                  System.out.println("Selenium Automation Framework" +sSpace+ "Basic Java Tutorial");

                 boolean bCompareResult = sPopularTopic.equals(sPopularTopic_2);
                 System.out.println("The result of String Comparison is : " + bCompareResult);

                 boolean bContainResult = sPopularTopic.contains("Framework");
                 System.out.println("The result is : " + bContainResult);

                  String [] aSplit = sPopularTopic.split("Automation");
                  System.out.println("The first part of the array is : " + aSplit[0]);
                  System.out.println("The last part of the array is : " + aSplit[1]);
        }

        }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
The advantage of the static keyword in Java is efficient memory management. The static keyword belongs to the class rather than the instance of the class,
means it is not required to instantiate the class to access its fields.

The basic functionality of the static keywords remains same for variable & methods means a static method is belongs to the class rather than the object of the class.
//you cannot use the non-static members inside the static method.   Only local variables & static/class variables can be used in the static method.

The static keyword can be used for following:
variable (also known as class variable)  //so if you have any variable whose value is fixed throughout the program you can use the static keyword in its declaration.
method (also known as class method)    
block
nested class

Example for Static block : Block is nothing but a piece of code written between parenthesis {}. If the static modifiers is used in the declaration of the block, 
it means that piece of code will run first when the program is start, it will execute before the main method. If a block is static, it almost works like the class constructors.

package vehicle;
    public class Car {
        public String sModel;
        public int iHighestSpeed;
        public static int iSteering;
        public static int iWheel;
        public static int iDoors;

	static {
        iSteering = 1;
        iWheel = 4;
        System.out.println("This block executed first");
        }

	public static void DisplayCharacterstics() {
        System.out.println("Number of Wheels in the Car: " + iWheel);
        System.out.println("Number of Steering in the Car: " + iSteering);
        }
    public static void main(String[] args) {
        Car.DisplayCharacterstics();
        }
	}
	
-----------------------------------------------------------------------------------------------------------------------------------------------
String.compareTo();  ==>> (Compares this String to another Object) Syntax:  int str1.compareTo(String str2)
String.equals();     ==>> Syntax: str1.equals(str2);
String.equalsIgnoreCase()  ==>>  Syntax: boolean str2.equalsIgnoreCase(str1);
String.concat();  ==>    Concatenates the specified string to the end of this string.


split method : 

String str = "My name is Chaitanya";
String[] arr = str.split(" "); //splitting string based on whitespace

  
String s1="java string split method by javatpoint";  
String[] words=s1.split("\\s");//splits the string based on whitespace  

System.out.println("split(String regex, int limit) with limit=2:");
String str = new String("28/12/2013");
String array2[]= str.split("/", 2);

Output : 
28
12/2013

System.out.println("split(String regex, int limit) with limit=0:");
String array3[]= str.split("/", 0);
Output : Normal Spliting basis of /


Negative limit says that the method returns substrings with no limit
System.out.println("split(String regex, int limit) with limit=-5:");
String array4[]= str.split("/", -5);
Output : Normal Spliting basis of /

Java String split with multiple delimiters (special characters)
String s = " ,ab;gh,bc;pq#kk$bb";
String[] str = s.split("[,;#$]");
================================================================================================
Replace keyword in  Java : 
Java String replaceFirst() example
Java program to replace first occurrence of a given string or regex in string with a new substring. 

String str = "Java says hello world. Java String tutorial";         
String newStr = str.replaceFirst("Java", "JAVA");     //Replace first occurrence of substring "Java" with "JAVA"
String regexResult = str.replaceFirst("[a]", "A");    ////Replace first occurrence of substring "a" with "A" 
System.out.println(newStr);
System.out.println(regexResult);

Output : 
JAVA says hello world. Java String tutorial
JAva says hello world. Java String tutorial


Java String replaceAll() example
String str = "how to do in java provides java tutorials";
String newStr = str.replaceAll("java", "scala");

Output : how to do in scala provides scala tutorials

Example : 
String str = "how to do in java provides java tutorials";
String newStr = str.replaceAll("\\s", "");         
System.out.println(newStr);
Output : howtodoinjavaprovidesjavatutorials

========================================================================================================
Java String startsWith() example
startsWith() method is overloaded method and has two forms:

boolean startsWith(String str) – returns true if the str is a prefix of the String.
boolean startsWith(String str, int fromIndex) – returns true if the String begins with str starting from the specified index fromIndex.

Example : 
String blogName = "howtodoinjava.com";
System.out.println( blogName.startsWith("how") );               //true         
System.out.println( "howtodoinjava.com".startsWith("howto") );  //true         
System.out.println( "howtodoinjava.com".startsWith("hello") );  //false
System.out.println( blogName.startsWith("howto", 0) );           //true
System.out.println( "howtodoinjava.com".startsWith("howto", 2) ); //false 

Java String endsWith() method example
Java String endsWith() method is used to check the suffix of the string. It verifies if given string ends with argument string or not.

Example : 
String blogName = "howtodoinjava.com";
System.out.println( blogName.endsWith("com") );  //true         
System.out.println( blogName.endsWith("net") );  //false

====================================================================
concat method example : 
 System.out.println("Hello".concat(" world")); // Hello world


Java String hashCode() method returns the hash code for the String.
String blogName = "howtodoinjava.com";
System.out.println( blogName.hashCode() );         // 1894145264
System.out.println( "hello world".hashCode() );    // 1794106052

Java String contains() example

System.out.println("Hello World".contains("Hello"));    //true
System.out.println("Hello World".contains("World"));    //true 
System.out.println("Hello World".contains("WORLD"));    //false - case-sensitive         
System.out.println("Hello World".contains("Java"));     //false 

====================================================================================================================

Singleton Class => In object-oriented programming, a singleton class is a class that can have only one object (an instance of the class) at a time.
Normal class vs Singleton class: Difference in normal and singleton class in terms of instantiation is that, For normal class we use constructor, whereas for singleton class we use getInstance() method.
======================================================================
Recursion  : Recursion in java is a process in which a method calls itself continuously. A method in java that calls itself is called recursive method.

public class RecursionExample1 {  
static void p(){  
System.out.println("hello");  
p();  
}  
  
public static void main(String[] args) {  
p();  
}  
}  

Call by Value and Call by Reference in Java
There is only call by value in java, not call by reference. If we call a method passing a value, it is known as call by value. The changes being done in the called method, is not affected in the calling method.

class Operation{  
 int data=50;  
  
 void change(int data){  
 data=data+100;//changes will be in the local variable only  
 }  
     
 public static void main(String args[]){  
   Operation op=new Operation();  
  
   System.out.println("before change "+op.data);  
   op.change(500);  
   System.out.println("after change "+op.data);  
  
 }  
}  






